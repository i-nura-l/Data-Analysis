# -*- coding: utf-8 -*-
"""data_analysis_visualiztion_project_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B9QUIbV3H9q7cjTIvfyMsLXUsaQv9mFX
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_excel('med_data.xlsx')
df

df = pd.read_excel(r"med_data.xlsx", sheet_name="trial")
df['Region'] = df['Region'].str.replace(' ', '_')
df['Region'] = df['Region'].str.replace('-', '_')
df['Region'] = df['Region'].str.replace('(', '')
df['Region'] = df['Region'].str.replace(')', '')
df

df = df.drop(columns=["Number of marriages", "The number of divorces", "Unnamed: 3", "Unnamed: 7", "Unnamed: 17"], axis = 1)
df.head(10)

df['Region'] = df['Region'].fillna(method='ffill')

df['Population'] = df['Population'].interpolate(method='linear').fillna(method='bfill').fillna(method='ffill')
for col in df.columns:
    if col == 'Region' and 'Year' and 'Population':
        continue

    df[col] = pd.to_numeric(df[col], errors='coerce')

    if df[col].isna().sum() > 0:
        if df[col].dtype in ['float64', 'int64']:
            df[col] = (
                df[col]
                .interpolate(method='linear')
                .fillna(method='bfill')
                .fillna(method='ffill')
                .fillna(df[col].mean())
            )
        else:
            df[col] = df[col].fillna(df[col].mode()[0])

numeric_cols = df.select_dtypes(include=['number']).columns
df[numeric_cols] = df[numeric_cols].round(0).astype('Int64')


df_filtered = df[df["Year"].between(2009, 2025)]
df_filtered

df_filtered = df_filtered.drop_duplicates(subset=['Region', 'Year'])
df_filtered

df_filtered.to_csv('filtered.csv', index=False)
df = pd.read_csv('filtered.csv')
from google.colab import files
files.download('/content/filtered.csv')
df

df_kr = df_filtered[df_filtered["Region"] == "Kyrgyz_Republic"]
df_chui = df_filtered[df_filtered["Region"] == "Chui"]
df_batken = df_filtered[df_filtered["Region"] == "Batken"]
df_jalal = df_filtered[df_filtered["Region"] == "Jalal-Abad"]
df_osh = df_filtered[df_filtered["Region"] == "Osh"]
df_naryn = df_filtered[df_filtered["Region"] == "Naryn"]
df_talas = df_filtered[df_filtered["Region"] == "Talas"]
df_issyk = df_filtered[df_filtered["Region"] == "Issyk-Kul"]
df_osh_city = df_filtered[df_filtered["Region"] == "Osh_city"]
df_bish = df_filtered[df_filtered["Region"] == "Bishkek_city"]

df_issyk

import matplotlib.pyplot as plt
df = pd.read_csv('filtered.csv')
data = df[df['Region'] != 'Kyrgyz_Republic']
hepatitis_data = data[['Year', 'Region', 'The number of people with newly diagnosed viral Hepatitis']]
hepatitis_grouped = hepatitis_data.groupby(['Year', 'Region']).sum().reset_index()
hepatitis_pivot = hepatitis_grouped.pivot(index='Year', columns='Region', values='The number of people with newly diagnosed viral Hepatitis')

plt.figure(figsize=(16, 6))
hepatitis_pivot.plot(kind='line', marker='o')
plt.title('Newly Diagnosed Viral Hepatitis Over Time by Region')
plt.xlabel('Year')
plt.ylabel('Number of New Cases')
plt.legend(title='Region', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.grid(True)
plt.tight_layout()
plt.show()

diabetes_data = data[['Year', 'Region', 'The number of people diagnosed with Diabetes Mellitus for the first time']]
year_of_interest = 2023
diabetes_year = diabetes_data[diabetes_data['Year'] == year_of_interest]

plt.figure(figsize=(10, 6))
plt.bar(diabetes_year['Region'], diabetes_year['The number of people diagnosed with Diabetes Mellitus for the first time'], color='skyblue')
plt.title(f'New Cases of Diabetes Mellitus in {year_of_interest} by Region')
plt.xlabel('Region')
plt.ylabel('Number of New Cases')
plt.xticks(rotation=45, ha='right')
plt.grid(True)
plt.tight_layout()
plt.show()

import pandas as pd
import plotly.express as px

regions_only = df[df['Region'] != 'Kyrgyz_Republic']

value_column = 'The number of people diagnosed with Diabetes Mellitus for the first time'  # swap as desired
agg = (
    regions_only
    .groupby(['Year', 'Region'])[value_column]
    .sum()
    .reset_index()
)

fig = px.bar(
    agg,
    x='Region',
    y=value_column,
    color='Region',
    animation_frame='Year',
    range_y=[0, agg[value_column].max()*1.1],
    title=f'Yearly Acute Intestinal Infections by Region',
    labels={value_column: 'Number of Cases'}
)

fig.update_layout(
    xaxis={'categoryorder':'total descending'},
    showlegend=False,
    margin=dict(l=40, r=40, t=60, b=40)
)

fig.show()

import pandas as pd
import plotly.express as px

regions_only = df[df['Region'] != 'Kyrgyz_Republic']

value_column = 'The number of new cases of Acute Intestinal Infections'
agg = (
    regions_only
    .groupby(['Year', 'Region'])[value_column]
    .sum()
    .reset_index()
)

fig = px.bar(
    agg,
    x='Region',
    y=value_column,
    color='Region',
    animation_frame='Year',
    range_y=[0, agg[value_column].max()*1.1],
    title=f'Yearly Acute Intestinal Infections by Region',
    labels={value_column: 'Number of Cases'}
)

fig.update_layout(
    xaxis={'categoryorder':'total descending'},
    showlegend=False,
    margin=dict(l=40, r=40, t=60, b=40)
)

fig.show()

value_column = 'The number of new cases of Acute Intestinal Infections'   # could be changed
agg = (
    regions_only
    .groupby(['Year','Region'])[value_column]
    .sum()
    .reset_index()
)

region_order = sorted(agg['Region'].unique())

fig = px.bar(
    agg,
    x='Region',
    y=value_column,
    color='Region',
    animation_frame='Year',
    range_y=[0, agg[value_column].max() * 1.1],
    category_orders={'Region': region_order},
    title='Yearly Acute Intestinal Infections by Region',
    labels={value_column: 'Number of Cases'}
)

fig.update_layout(
    xaxis=dict(categoryorder='array', categoryarray=region_order),
    showlegend=False,
    margin=dict(l=40, r=40, t=60, b=40)
)
fig.layout.updatemenus[0].buttons[0].args[1]['frame']['duration'] = 1000
fig.layout.updatemenus[0].buttons[0].args[1]['transition']['duration'] = 500

fig.show()

alcohol_dependence_data = df[['Year', 'Region', 'The number of people diagnosed with Alcohol Dependence']]
alcohol_dependence_year = alcohol_dependence_data[alcohol_dependence_data['Year'] == 2024]
alcohol_dependence_year = alcohol_dependence_year[alcohol_dependence_year['Region'] != 'Kyrgyz_Republic']
alcohol_dependence_total = alcohol_dependence_year.groupby('Region').sum()

plt.figure(figsize=(8, 8))
plt.pie(alcohol_dependence_total['The number of people diagnosed with Alcohol Dependence'],
        labels=alcohol_dependence_total.index,
        autopct='%1.1f%%',
        startangle=140,
        colors=plt.cm.Paired.colors)
plt.title(f'Proportion of Alcohol Dependence Cases by Region in {year_of_interest}')
plt.axis('equal')
plt.show()

import plotly.graph_objects as go
import pandas as pd

diseases = [
    'The number of people with newly diagnosed viral Hepatitis',
    'The number of people with newly diagnosed viral Hepatitis A',
    'The number of people diagnosed with Alcohol Dependence',
    'The number of people diagnosed with Tuberculosis ',
    'The number of people diagnosed with Diabetes Mellitus for the first time',
    'The number of people diagnosed with a Drug Addiction disorder',
    'The number of new cases of Acute Intestinal Infections',
    'The number of new cases of Brucellosis'
]
nat = (
    df[df['Region'] == 'Kyrgyz_Republic']
    .groupby('Year')[diseases]
    .sum()
    .reset_index()
)

long = nat.melt(
    id_vars='Year', value_vars=diseases, var_name='Disease', value_name='Cases'
)

order = diseases

fig = go.Figure()

for year in long['Year'].unique():
    df_year = long[long['Year'] == year]
    fig.add_trace(
        go.Pie(
            labels=df_year['Disease'],
            values=df_year['Cases'],
            name=str(year),
            visible=(year == long['Year'].min()),
        )
    )

frames = [
    go.Frame(data=[go.Pie(labels=df_year['Disease'], values=df_year['Cases'])],
              name=str(year))
    for year, df_year in long.groupby('Year')
]
fig.frames = frames

fig.update_layout(
    updatemenus=[
        dict(
            type="buttons",
            buttons=[
                dict(label="Play",
                     method="animate",
                     args=[None, {"frame": {"duration": 1000, "redraw": True},
                                  "fromcurrent": True,
                                  "transition": {"duration": 500,
                                                 "easing": "quadratic-in-out"}}]),
                dict(label="Pause",
                     method="animate",
                     args=[[None], {"frame": {"duration": 0, "redraw": False},
                                   "mode": "immediate",
                                   "transition": {"duration": 0}}])
            ],
            direction="left",
            pad={"r": 10, "t": 87},
            showactive=False,
            x=0.1,
            xanchor="right",
            y=0,
            yanchor="top"
        )
    ],
    showlegend=True,
    legend_title_text='Disease',
    margin=dict(l=40, r=40, t=60, b=40),
    title='Yearly Proportions of Disease Burden (Kyrgyz Republic)'
)

fig.show()

value_column = 'The number of people diagnosed with Tuberculosis '
regions_only = regions_only[regions_only['Year'] <= 2022]
agg = (
    regions_only
    .groupby(['Year','Region'])[value_column]
    .sum()
    .reset_index()
)

region_order = sorted(agg['Region'].unique())
region_order = (
    agg.groupby('Region')[value_column].sum().sort_values(ascending=False).index.tolist()
)

fig = px.bar(
    agg,
    x='Region',
    y=value_column,
    color='Region',
    animation_frame='Year',
    category_orders={'Region': region_order},
    range_y=[0, agg[value_column].max() * 1.1],
    title=f'{value_column} by Region Over Time',
    labels={value_column: 'Number of Cases'}
)

fig.update_layout(
    xaxis=dict(categoryorder='array', categoryarray=region_order),
    showlegend=False,
    margin=dict(l=40, r=40, t=60, b=40)
)

btn = fig.layout.updatemenus[0].buttons[0]
btn.args[1]['frame']['duration'] = 1000
btn.args[1]['transition']['duration'] = 500

fig.show()

# Dual‑Axis Line Chart: Population & Healthcare Resources Trends
import matplotlib.pyplot as plt
data = pd.read_csv('filtered.csv')
line_data = data.groupby('Year').agg({
    'Population': 'sum',
    'Number of beds': 'sum',
    'Number of specialists with secondary medical education': 'sum',
    'Number of specialists with higher medical education': 'sum'
}).reset_index()

fig, ax1 = plt.subplots(figsize=(12, 6))
ax1.set_xlabel('Year')
ax1.set_ylabel('Population', color='tab:blue')
ax1.plot(line_data['Year'], line_data['Population'], marker='o', color='tab:blue', label='Population')
ax1.tick_params(axis='y', labelcolor='tab:blue')

ax2 = ax1.twinx()
ax2.set_ylabel('Beds & Specialists', color='gray')
ax2.plot(line_data['Year'], line_data['Number of beds'], marker='s', linestyle='--', color='tab:red', label='Beds')
ax2.plot(line_data['Year'], line_data['Number of specialists with secondary medical education'], marker='^', linestyle=':', color='tab:green', label='Spec (Secondary)')
ax2.plot(line_data['Year'], line_data['Number of specialists with higher medical education'], marker='D', linestyle='-.', color='purple', label='Spec (Higher)')
ax2.tick_params(axis='y', labelcolor='gray')

fig.legend(loc="upper left", bbox_to_anchor=(0.1,0.9))
plt.title('Population and Healthcare Resources Trends (Dual Axis)')
plt.grid(True)
plt.tight_layout()
plt.show()

"""The dual-axis allows us to simultaneously observe the gradual but stable population increase and more subtle fluctuations in healthcare resources. Notice that despite population growth, hospital bed availability remains relatively constant, suggesting increased efficiency or possible resource limitations. On the other hand, both categories of healthcare specialists show a positive upward trend, particularly specialists with secondary medical education, highlighting the healthcare system's focus on expanding human resources"""

# Bar Chart: Disease Distribution by Region
regions_only = data[data['Region'] != 'Kyrgyz_Republic']
disease_cols = [
    'The number of people with newly diagnosed viral Hepatitis',
    'The number of people diagnosed with Alcohol Dependence',
    'The number of people diagnosed with Tuberculosis ',
    'The number of people diagnosed with Diabetes Mellitus for the first time',
    'The number of people diagnosed with a Drug Addiction disorder',
    'The number of new cases of Syphilis',
    'The number of new cases of Acute Intestinal Infections',
    'The number of new cases of Brucellosis'
]
region_disease_data = regions_only.groupby('Region')[disease_cols].sum()
region_disease_data.plot(kind='bar', figsize=(15, 8), width=0.8)
plt.title('Disease Distribution by Region (Excluding National Total)')
plt.xlabel('Region')
plt.ylabel('Total Cases')
plt.xticks(rotation=45, ha='right')
plt.legend(loc='upper right', fontsize='small')
plt.grid(axis='y', linestyle='--')
plt.tight_layout()
plt.show()

"""This bar chart compares the total number of diagnosed cases across various health conditions by region, providing clarity on regional health challenges

As illustrated, significant variations exist between regions in terms of disease incidence. For example, certain regions distinctly stand out with higher incidences of specific diseases like Acute Intestinal Infections or Hepatitis, indicating a pressing need for targeted public health interventions. Understanding these disparities is crucial for effective resource distribution and disease prevention strategies
"""

#  Pie Chart

import matplotlib.pyplot as plt

diseases = [
    'The number of people with newly diagnosed viral Hepatitis',
    'The number of people with newly diagnosed viral Hepatitis A',
    'The number of people diagnosed with Alcohol Dependence',
    'The number of people diagnosed with Tuberculosis ',
    'The number of people diagnosed with Diabetes Mellitus for the first time',
    'The number of people diagnosed with a Drug Addiction disorder',
    'The number of new cases of Acute Intestinal Infections',
    'The number of new cases of Brucellosis'
]
abbrev = ['HepV', 'HepA', 'AlcDep', 'Tub', 'Diab', 'DrugAdd', 'AII', 'Bruc']

national_data = data[data['Region'] == 'Kyrgyz_Republic'][diseases].sum()

fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(
    national_data.values,
    labels=abbrev,
    autopct='%1.1f%%',
    startangle=140,
    pctdistance=0.8,
    textprops={'fontsize': 8}
)
ax.legend(
    wedges,
    national_data.index,
    title="Disease (full name)",
    loc="center left",
    bbox_to_anchor=(1, 0, 0.5, 1),
    fontsize=8
)
ax.set_title('Proportion of Disease Burden in Kyrgyz Republic')
ax.set_aspect('equal')
plt.tight_layout()
plt.show()

"""This pie chart breaks down the overall disease burden in the Kyrgyz Republic, offering a snapshot of the proportion each condition contributes to the total diagnosed cases across the years

We can clearly see that Acute Intestinal Infections represent the largest share by far — signaling both a widespread public health issue and a major burden on healthcare services. Other notable contributors include Viral Hepatitis and Diabetes Mellitus, indicating the need for both preventive and chronic care strategies. Interestingly, conditions like Brucellosis and Syphilis, while critical, form a smaller slice of the overall burden — perhaps reflecting localized issues or underreporting.
"""

# 4. Scatter Plot: Specialists vs. Tuberculosis Cases
import seaborn as sns

scatter_data = regions_only.groupby('Region').agg({
    'Number of specialists with higher medical education': 'sum',
    'The number of people diagnosed with Tuberculosis ': 'sum',
    'Population': 'sum'
}).reset_index()

sns.scatterplot(
    data=scatter_data,
    x='Number of specialists with higher medical education',
    y='The number of people diagnosed with Tuberculosis ',
    size='Population',
    hue='Region',
    sizes=(50, 300),
    legend=False
)
plt.title('Medical Specialists vs. Tuberculosis Cases by Region')
plt.xlabel('Specialists (Higher Education)')
plt.ylabel('Tuberculosis Cases')
plt.grid(True)
plt.tight_layout()
plt.show()

"""    Do regions with more healthcare resources experience fewer cases of disease?”

Plot Idea:

    X-axis: Number of specialists (either total or higher education)

    Y-axis: Disease incidence (we can start with one, like Tuberculosis or Diabetes)

    Each point = one region (totaled across all years for simplicity)

    Bubble size or color = optional, can encode Population or beds

  This scatter plot investigates the relationship between healthcare staffing — specifically specialists with higher medical education — and the number of diagnosed Tuberculosis cases across regions

  Interestingly, the data suggests no strong inverse correlation. Some regions with a high number of specialists still report a high burden of Tuberculosis, which may indicate other underlying factors like socioeconomic status, living conditions, or delayed diagnosis. It suggests that while medical staff are essential, they alone aren't enough without parallel efforts in community outreach, housing, and early detection programs
"""

# 5. Box Plot: Acute Intestinal Infections by Year
box_data = regions_only[['Year', 'Region', 'The number of new cases of Acute Intestinal Infections']]
sns.boxplot(
    data=box_data,
    x='Year',
    y='The number of new cases of Acute Intestinal Infections'
)
plt.title('Yearly Distribution of Acute Intestinal Infections Across Regions')
plt.xlabel('Year')
plt.tick_params(axis='x', rotation=45)
plt.ylabel('Number of Cases')
plt.grid(True, axis='y', linestyle='--')
plt.tight_layout()
plt.show()

"""This box plot visualizes the yearly distribution of Acute Intestinal Infection cases across different regions, revealing both the consistency and variability in reported cases

We observe that while the median number of cases generally increases over time, the spread (or IQR) is also widening, indicating growing regional disparities. Notably, in certain years, outliers suggest regional outbreaks far above typical levels, signaling potential localized crises. Such spikes warrant further investigation — whether caused by water contamination, infrastructure failure, or environmental conditions.
"""

# Correlation Heatmap

import seaborn as sns
import matplotlib.pyplot as plt

corr_data = regions_only.drop(columns=['Region', 'Year'])
corr_matrix = corr_data.corr()

full_names = list(corr_matrix.columns)
short_map = {name: str(i+1) for i, name in enumerate(full_names)}

numeric_corr = corr_matrix.rename(index=short_map, columns=short_map)

plt.figure(figsize=(10, 8))
sns.heatmap(
    numeric_corr,
    annot=True, fmt=".2f",
    cmap='coolwarm',
    square=True,
    cbar_kws={'shrink': 0.6}
)
plt.title('Correlation Matrix of Health Indicators (Numeric Labels)')
plt.tight_layout()
plt.show()

print("Variable mapping:")
for full, code in short_map.items():
    print(f"{code} → {full}")

"""This correlation heatmap highlights the relationships between key health indicators and healthcare capacity across regions, offering insights into how different factors influence one another.

Strong positive correlations can be seen between many diseases, such as Viral Hepatitis and Hepatitis A, as expected.

There's also a notable correlation between the number of specialists and some chronic or communicable conditions — which could indicate either better detection or higher healthcare demand.

Meanwhile, low or negative correlations can point to unrelated factors or independent trends.

"These insights can guide resource planning, surveillance strategies, and reveal where interventions might simultaneously benefit multiple health issues."
"""



"""### List 1


"""

import pandas as pd
import matplotlib.pyplot as plt

file_path = "data_lists.xlsx"
df = pd.read_excel(file_path, sheet_name='Лист1')

years = df.iloc[2, 3:].astype(int)
hospitals = df.iloc[3, 3:].astype(float).values
clinics = df.iloc[4, 3:].astype(float).values
family_clinic = df.iloc[5, 3:].astype(float).values
ambulance_services = df.iloc[11, 3:].astype(float).values

plt.figure(figsize=(10, 6))
plt.plot(years, hospitals, marker='o', label='Hospitals')
plt.plot(years, clinics, marker='s', label='Clinics')
plt.plot(years, family_clinic, marker='^', label='Family Clinic')
plt.plot(years, ambulance_services, marker='D', label='Ambulance Services')
plt.title('Number of Medical Institutions in Kyrgyzstan (2011–2023)', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Number of Institutions', fontsize=12)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

df_result = pd.DataFrame({
    'Year': years,
    'Hospitals': hospitals,
    'Clinics': clinics
})
print(df_result)



file_path = "data_lists.xlsx"
df = pd.read_excel(file_path, sheet_name="Лист2")

years = df.iloc[2, 3:].dropna().astype(int)
total_beds = df.iloc[3, 3:].astype(float).values
therapeutic_beds = df.iloc[4, 3:].astype(float).values
surgical_beds = df.iloc[5, 3:].astype(float).values
pediatric_beds = df.iloc[6, 3:].astype(float).values
intensive_care_beds = df.iloc[7, 3:].astype(float).values
emergency_room_beds = df.iloc[8, 3:].astype(float).values

plt.figure(figsize=(10, 6))
plt.plot(years, total_beds, marker='o', label='Total Beds')
plt.plot(years, therapeutic_beds, marker='s', label='Therapeutic Beds')
plt.plot(years, surgical_beds, marker='^', label='Surgical Beds')
plt.plot(years, pediatric_beds, marker='D', label='Pediatric Beds')
plt.plot(years, intensive_care_beds, marker='P', label='Intensive Care Beds')
plt.plot(years, emergency_room_beds, marker='X', label='Emergency Room Beds')
plt.title('Number of beds in Kyrgyzstan (2011–2023)', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Number of beds', fontsize=12)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

df_result = pd.DataFrame({
    'Year': years,
    'Total Beds': total_beds,
    'Therapeutic Beds': therapeutic_beds
})
print(df_result)

# Bar plot
plt.figure(figsize=(10, 6))
plt.bar(years, total_beds, label='Total Beds')
plt.bar(years, therapeutic_beds, label='Therapeutic Beds')
plt.bar(years, surgical_beds, label='Surgical Beds')
plt.bar(years, pediatric_beds, label='Pediatric Beds')
plt.bar(years, intensive_care_beds, label='Intensive Care Beds')
plt.bar(years, emergency_room_beds, label='Emergency Room Beds')
plt.title('Number of beds in Kyrgyzstan (2011–2023)', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Number of beds', fontsize=12)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

file_path = "data_lists.xlsx"
df = pd.read_excel(file_path, sheet_name="Лист3")

years = df.iloc[1, 3:].dropna().astype(int).tolist()
physicians = df.iloc[3, 3:3+len(years)].astype(float).values

plt.figure(figsize=(10, 6))
plt.plot(years, physicians, marker='o', color='blue')
plt.title('Number of Physicians in Kyrgyzstan (1990–2023)', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Number of Physicians', fontsize=12)
plt.grid(True)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

file_path = "data_lists.xlsx"
df = pd.read_excel(file_path, sheet_name="Лист3")

years = df.iloc[1, 3:].dropna().astype(int).tolist()
physicians = df.iloc[22, 3:3+len(years)].astype(float).values

plt.figure(figsize=(10, 6))
plt.plot(years, physicians, marker='o', color='blue')
plt.title('Number of Parsmedical personnel in Kyrgyzstan (1990–2023)', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Number of Parsmedical personnel', fontsize=12)
plt.grid(True)
plt.tight_layout()
plt.show()

"""### List 4"""

file_path = "data (lists).xlsx"
df = pd.read_excel(file_path, sheet_name="Лист4")

df_clean = df.iloc[3:, :]
years = df_clean.iloc[0, 3:].dropna().astype(int).tolist()
df_clean.columns = ['kg_title', 'ru_title', 'en_title'] + years
df_clean = df_clean[1:].reset_index(drop=True)

df_clean['ru_title'] = df_clean['ru_title'].str.strip()

important_diseases_ru = [
    'Инфекционные и паразитарные болезни',
    'Новообразования',
    'Болезни эндокринной системы, расстройства',
    'Психические расстройства и расстройства поведения',
    'Болезни органов дыхания',
    'Болезни системы кровообращения',
    'Болезни мочеполовой системы'
]

filtered_df = df_clean[df_clean['ru_title'].isin(important_diseases_ru)]

plt.figure(figsize=(12, 7))
for _, row in filtered_df.iterrows():
    label = row['ru_title']
    values = row[years].astype(float).values
    plt.plot(years, values, marker='o', label=label)

plt.title('Заболеваемость по основным группам болезней в Кыргызстане (1990–2023)', fontsize=14)
plt.xlabel('Год', fontsize=12)
plt.ylabel('Число случаев', fontsize=12)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import pandas as pd

df = pd.read_csv('filtered.csv')

regions_only = df[df['Region'] != 'Kyrgyz_Republic']

tb_data = regions_only[['Region', 'Year', 'The number of people diagnosed with Tuberculosis ']].dropna()

grouped = tb_data.groupby('Region')

plt.figure(figsize=(12, 6))
for name, group in grouped:
    plt.plot(group['Year'], group['The number of people diagnosed with Tuberculosis '], label=name)

plt.legend()
plt.title("The number of people diagnosed with Tuberculosis")
plt.xlabel("Year")
plt.ylabel("Cases")
plt.grid(True)
plt.tight_layout()
plt.show()

import pandas as pd
import plotly.express as px
df = pd.read_csv('filtered.csv')
df.columns = df.columns.str.strip()

regions_only = df[df['Region'] != 'Kyrgyz_Republic']

value_column = 'The number of people diagnosed with Tuberculosis'
regions_only = regions_only[regions_only['Year'] <= 2025]
agg = (
    regions_only
    .groupby(['Year','Region'])[value_column]
    .sum()
    .reset_index()
)

region_order = sorted(agg['Region'].unique())
region_order = (
    agg.groupby('Region')[value_column].sum().sort_values(ascending=False).index.tolist()
)

fig = px.bar(
    agg,
    x='Region',
    y=value_column,
    color='Region',
    animation_frame='Year',
    category_orders={'Region': region_order},
    range_y=[0, agg[value_column].max() * 1.1],
    title=f'{value_column} by Region Over Time',
    labels={value_column: 'Number of Cases'}
)

fig.update_layout(
    xaxis=dict(categoryorder='array', categoryarray=region_order),
    showlegend=False,
    margin=dict(l=40, r=40, t=60, b=40)
)

btn = fig.layout.updatemenus[0].buttons[0]
btn.args[1]['frame']['duration'] = 1000
btn.args[1]['transition']['duration'] = 500

fig.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

file_path = "data (lists).xlsx"
df = pd.read_excel(file_path, sheet_name="Лист6")

df_clean = df.iloc[3:, :].reset_index(drop=True)
years = df_clean.iloc[0, 3:].dropna().astype(int).tolist()
df_clean.columns = ['kg_title', 'ru_title', 'en_title'] + years
df_clean = df_clean[1:].reset_index(drop=True)
df_clean['en_title'] = df_clean['en_title'].str.strip()

age_groups = [
    '0-4years (before 1996 0-9 years, before 2021 0-6 years,)',
    '5-14 years (before 1996 10-14 years, before 2021 7-14 years )',
    '15-17 years (before 1996 15-19 years)',
    '18-24 years (before 1996 20-39 years)',
    '25-34 years',
    '35-44 years',
    '45-54 years                    (before 1993 40-59 years, in 2002 45-59 years)',
    '55-59 years (before 2021 55-64 years)',
    '60years and older              (before 1993 and in 2002 60 and older,before 2021 65  older)'
]

age_df = df_clean[df_clean['en_title'].isin(age_groups)]

latest_year = years[-1]
labels, values = [], []
for _, row in age_df.iterrows():
    label = row['en_title'].split('(')[0].strip()
    val = pd.to_numeric(row[latest_year], errors='coerce')
    if not np.isnan(val):
        labels.append(label)
        values.append(val)

plt.figure(figsize=(10, 6))
plt.barh(labels, values, color='skyblue')
plt.title(f"Active Tuberculosis Cases by Age Group in Kyrgyzstan ({latest_year})", fontsize=14)
plt.xlabel("Number of Cases", fontsize=12)
plt.ylabel("Age Group", fontsize=12)
plt.grid(axis='x', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

file_path = "data (lists).xlsx"
df = pd.read_excel(file_path, sheet_name="Лист6")

df_clean = df.iloc[3:, :].reset_index(drop=True)
years = df_clean.iloc[0, 3:].dropna().astype(int).tolist()
df_clean.columns = ['kg_title', 'ru_title', 'en_title'] + years
df_clean = df_clean[1:].reset_index(drop=True)

df_clean['en_title'] = df_clean['en_title'].str.strip()

gender_df = df_clean[df_clean['en_title'].isin(['men', 'women', 'Total'])]

plt.figure(figsize=(10, 6))
for _, row in gender_df.iterrows():
    label = row['en_title']
    values = pd.to_numeric(row[years], errors='coerce').values
    plt.plot(years, values, marker='o', label=label)

plt.title("Active Tuberculosis by Gender in Kyrgyzstan (1991–2023)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Number of Cases", fontsize=12)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import numpy as np


file_path = "data (lists).xlsx"
df = pd.read_excel(file_path, sheet_name="Лист6")

df_clean = df.iloc[3:, :].reset_index(drop=True)
years = df_clean.iloc[0, 3:].dropna().astype(int).tolist()
df_clean.columns = ['kg_title', 'ru_title', 'en_title'] + years
df_clean = df_clean[1:].reset_index(drop=True)

df_clean['en_title'] = df_clean['en_title'].str.strip()

gender_df = df_clean[df_clean['en_title'].isin(['men', 'women', 'Total'])]

plt.figure(figsize=(10, 6))

for _, row in gender_df.iterrows():
    label = row['en_title']
    values = pd.to_numeric(row[years], errors='coerce').values
    plt.plot(years, values, marker='o', label=label)

X = np.array(years).reshape(-1, 1)
predicted_values = {}

model = LinearRegression()
for _, row in gender_df.iterrows():
    label = row['en_title']
    y = pd.to_numeric(row[years], errors='coerce').dropna().values
    if len(y) > 1:
        model.fit(X, y)
        predicted_years = np.array(range(2024, 2031)).reshape(-1, 1)
        predicted_cases = model.predict(predicted_years)
        predicted_values[label] = predicted_cases

for label, prediction in predicted_values.items():
    plt.plot(range(2024, 2031), prediction, marker='x', linestyle='--', label=f"{label} (Prediction)", color='black')

plt.title("Active Tuberculosis by Gender in Kyrgyzstan (1991–2030)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Number of Cases", fontsize=12)

plt.legend()

plt.grid(True)
plt.tight_layout()
plt.show()